import os
import json
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.types import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from datetime import datetime
from scheduler import scheduler

load_dotenv()

API_TOKEN = os.getenv("API_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
USER_ID = int(os.getenv("USER_ID"))

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
bot.set_current(bot)
dp.set_current(dp)

app = FastAPI()

TASKS_FILE = "tasks.json"

DAILY_TASKS = {
    '1': '–ò–∑—É—á–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –Ω–∞–ø–∏—à–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä.',
    '2': '–£—Å–ª–æ–≤–∏—è: –Ω–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –≤–æ–¥–∏—Ç—å –º–∞—à–∏–Ω—É.',
    '3': '–¶–∏–∫–ª—ã –∏ —Å—Ç—Ä–æ–∫–∏: –ø–æ—Å—á–∏—Ç–∞–π —á–∞—Å—Ç–æ—Ç—É —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ.',
    '4': '–°–ø–∏—Å–∫–∏ –∏ —Å–ª–æ–≤–∞—Ä–∏: —Å–¥–µ–ª–∞–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫.',
    '5': '–°–æ–±–µ—Ä–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞.'
}

keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ —Å–Ω–æ–≤–∞"))
keyboard.add(KeyboardButton("–Ø –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ"))

inline_keyboard = InlineKeyboardMarkup().add(
    InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="repeat_task"),
    InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å —Å–µ—Å—Å–∏—é", callback_data="reset_session")
)

def load_tasks():
    try:
        with open(TASKS_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_tasks(data):
    with open(TASKS_FILE, 'w') as f:
        json.dump(data, f)

def is_task_completed(date_str):
    tasks = load_tasks()
    return tasks.get(date_str, False)

def mark_task_completed(date_str):
    tasks = load_tasks()
    tasks[date_str] = True
    save_tasks(tasks)

async def send_task():
    today = datetime.now().date().isoformat()
    if is_task_completed(today):
        return
    day_num = str((datetime.now().date() - datetime(2025, 7, 4).date()).days + 1)
    task = DAILY_TASKS.get(day_num, "–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π! :)")
    await bot.send_message(USER_ID, f"üîî –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{task}", reply_markup=keyboard)

async def send_reminder():
    today = datetime.now().date().isoformat()
    if not is_task_completed(today):
        await bot.send_message(USER_ID, "‚è∞ –ù–µ –∑–∞–±—É–¥—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–Ω—è!", reply_markup=keyboard)

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –∑–∞–¥–∞–Ω–∏—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å, –ø–æ–∫–∞ —Ç—ã –Ω–µ —Å–¥–µ–ª–∞–µ—à—å –∏—Ö.", reply_markup=keyboard)
    await send_task()

@dp.message_handler(lambda m: m.text == "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ —Å–Ω–æ–≤–∞")
async def show_task(message: types.Message):
    await send_task()

@dp.message_handler(lambda m: m.text == "–Ø –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ")
async def complete_task(message: types.Message):
    today = datetime.now().date().isoformat()
    mark_task_completed(today)
    await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ì–æ—Ä–∂—É—Å—å —Ç–æ–±–æ–π! ‚úä")

@dp.message_handler(commands=["reset"])
async def reset_handler(message: types.Message):
    scheduler.remove_all_jobs()
    await message.answer("–°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—á–Ω—É—Ç—Å—è –∑–∞–Ω–æ–≤–æ.")
    await send_task()

@dp.callback_query_handler(lambda c: c.data == "repeat_task")
async def inline_repeat(callback_query: types.CallbackQuery):
    await send_task()
    await callback_query.answer("–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ.")

@dp.callback_query_handler(lambda c: c.data == "reset_session")
async def inline_reset(callback_query: types.CallbackQuery):
    scheduler.remove_all_jobs()
    await callback_query.message.answer("–°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—á–Ω—É—Ç—Å—è –∑–∞–Ω–æ–≤–æ.")
    await send_task()
    await callback_query.answer("–°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞")

@app.post("/webhook")
async def webhook(request: Request):
    data = await request.json()
    update = Update(**data)
    bot.set_current(bot)
    dp.set_current(dp)
    await dp.process_update(update)
    return {"ok": True}

@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL)
    scheduler.start()
    scheduler.add_job(send_task, 'cron', hour=4, minute=0)
    for hour in range(5, 14):
        scheduler.add_job(send_reminder, 'cron', hour=hour, minute=0)
    await send_task()

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    await bot.session.close()
